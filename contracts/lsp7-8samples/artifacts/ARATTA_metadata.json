{
	"compiler": {
		"version": "0.8.29+commit.ab55807c"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "ERC725Y_DataKeysValuesEmptyArray",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC725Y_DataKeysValuesLengthMismatch",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC725Y_MsgValueDisallowed",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "storedData",
						"type": "bytes"
					}
				],
				"name": "InvalidExtensionAddress",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "InvalidFunctionSelector",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP4TokenNameNotEditable",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP4TokenSymbolNotEditable",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP4TokenTypeNotEditable",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "authorizedAmount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "LSP7AmountExceedsAuthorizedAmount",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "balance",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "LSP7AmountExceedsBalance",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "callIndex",
						"type": "uint256"
					}
				],
				"name": "LSP7BatchCallFailed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP7CannotSendWithAddressZero",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP7CannotUseAddressZeroAsOperator",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "caller",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "LSP7DecreaseAllowanceNotAuthorized",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP7DecreasedAllowanceBelowZero",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP7InvalidTransferBatch",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenReceiver",
						"type": "address"
					}
				],
				"name": "LSP7NotifyTokenReceiverContractMissingLSP1Interface",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenReceiver",
						"type": "address"
					}
				],
				"name": "LSP7NotifyTokenReceiverIsEOA",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "caller",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "LSP7RevokeOperatorNotAuthorized",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP7TokenContractCannotHoldValue",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LSP7TokenOwnerCannotBeOperator",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "functionSelector",
						"type": "bytes4"
					}
				],
				"name": "NoExtensionFoundForFunctionSelector",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "OperatorAllowanceCannotBeIncreasedFromZero",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OwnableCannotSetZeroAddressAsOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "totalSupply",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "tokenSupplyCap",
						"type": "uint256"
					}
				],
				"name": "SupplyLimitExceeded",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "dataKey",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "dataValue",
						"type": "bytes"
					}
				],
				"name": "DataChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "operatorNotificationData",
						"type": "bytes"
					}
				],
				"name": "OperatorAuthorizationChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "bool",
						"name": "notified",
						"type": "bool"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "operatorNotificationData",
						"type": "bytes"
					}
				],
				"name": "OperatorRevoked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "force",
						"type": "bool"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "operatorNotificationData",
						"type": "bytes"
					}
				],
				"name": "authorizeOperator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					}
				],
				"name": "authorizedAmountFor",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"name": "batchCalls",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "results",
						"type": "bytes[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "subtractedAmount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "operatorNotificationData",
						"type": "bytes"
					}
				],
				"name": "decreaseAllowance",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "dataKey",
						"type": "bytes32"
					}
				],
				"name": "getData",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "dataValue",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "dataKeys",
						"type": "bytes32[]"
					}
				],
				"name": "getDataBatch",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "dataValues",
						"type": "bytes[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					}
				],
				"name": "getOperatorsOf",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "addedAmount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "operatorNotificationData",
						"type": "bytes"
					}
				],
				"name": "increaseAllowance",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "force",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "mint",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenOwner",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "notify",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "operatorNotificationData",
						"type": "bytes"
					}
				],
				"name": "revokeOperator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "dataKey",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "dataValue",
						"type": "bytes"
					}
				],
				"name": "setData",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "dataKeys",
						"type": "bytes32[]"
					},
					{
						"internalType": "bytes[]",
						"name": "dataValues",
						"type": "bytes[]"
					}
				],
				"name": "setDataBatch",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokenSupplyCap",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "force",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "transfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "from",
						"type": "address[]"
					},
					{
						"internalType": "address[]",
						"name": "to",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "amount",
						"type": "uint256[]"
					},
					{
						"internalType": "bool[]",
						"name": "force",
						"type": "bool[]"
					},
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"name": "transferBatch",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"author": "Aratta Labs",
			"custom:emoji": "🎯",
			"custom:security-contact": "atenyun@gmail.com",
			"details": "Deployed contract addresses are available in the project repository.",
			"errors": {
				"ERC725Y_DataKeysValuesEmptyArray()": [
					{
						"details": "Reverts when one of the array parameter provided to {setDataBatch} function is an empty array."
					}
				],
				"ERC725Y_DataKeysValuesLengthMismatch()": [
					{
						"details": "Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function."
					}
				],
				"ERC725Y_MsgValueDisallowed()": [
					{
						"details": "Reverts when sending value to the {setData} or {setDataBatch} function."
					}
				],
				"InvalidExtensionAddress(bytes)": [
					{
						"details": "reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)"
					}
				],
				"InvalidFunctionSelector(bytes)": [
					{
						"details": "reverts when the contract is called with a function selector not valid (less than 4 bytes of data)"
					}
				],
				"LSP4TokenNameNotEditable()": [
					{
						"details": "Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."
					}
				],
				"LSP4TokenSymbolNotEditable()": [
					{
						"details": "Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."
					}
				],
				"LSP4TokenTypeNotEditable()": [
					{
						"details": "Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized."
					}
				],
				"LSP7AmountExceedsAuthorizedAmount(address,uint256,address,uint256)": [
					{
						"details": "reverts when `operator` of `tokenOwner` send an `amount` of tokens larger than the `authorizedAmount`."
					}
				],
				"LSP7AmountExceedsBalance(uint256,address,uint256)": [
					{
						"details": "reverts when sending an `amount` of tokens larger than the current `balance` of the `tokenOwner`."
					}
				],
				"LSP7BatchCallFailed(uint256)": [
					{
						"details": "Reverts when a batch call failed."
					}
				],
				"LSP7CannotSendWithAddressZero()": [
					{
						"details": "reverts when trying to: - mint tokens to the zero address. - burn tokens from the zero address. - transfer tokens from or to the zero address."
					}
				],
				"LSP7CannotUseAddressZeroAsOperator()": [
					{
						"details": "reverts when trying to set the zero address as an operator."
					}
				],
				"LSP7DecreaseAllowanceNotAuthorized(address,address,address)": [
					{
						"details": "Reverts when the call to decrease allowance is not authorized."
					}
				],
				"LSP7DecreasedAllowanceBelowZero()": [
					{
						"details": "Reverts when trying to decrease an operator's allowance to more than its current allowance."
					}
				],
				"LSP7InvalidTransferBatch()": [
					{
						"details": "reverts when the array parameters used in {transferBatch} have different lengths."
					}
				],
				"LSP7NotifyTokenReceiverContractMissingLSP1Interface(address)": [
					{
						"details": "reverts if the `tokenReceiver` does not implement LSP1 when minting or transferring tokens with `bool force` set as `false`."
					}
				],
				"LSP7NotifyTokenReceiverIsEOA(address)": [
					{
						"details": "reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool force` set as `false`."
					}
				],
				"LSP7RevokeOperatorNotAuthorized(address,address,address)": [
					{
						"details": "Reverts when the call to revoke operator is not authorized."
					}
				],
				"LSP7TokenContractCannotHoldValue()": [
					{
						"details": "Error occurs when sending native tokens to the LSP7 contract without sending any data. E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension."
					}
				],
				"LSP7TokenOwnerCannotBeOperator()": [
					{
						"details": "reverts when trying to authorize or revoke the token's owner as an operator."
					}
				],
				"NoExtensionFoundForFunctionSelector(bytes4)": [
					{
						"details": "reverts when there is no extension for the function selector being called with"
					}
				],
				"OperatorAllowanceCannotBeIncreasedFromZero(address)": [
					{
						"details": "Reverts when token owner call {increaseAllowance} for an operator that does not have any allowance"
					}
				],
				"OwnableCannotSetZeroAddressAsOwner()": [
					{
						"details": "Reverts when trying to set `address(0)` as the contract owner when deploying the contract or initializing it."
					}
				]
			},
			"events": {
				"DataChanged(bytes32,bytes)": {
					"details": "Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.",
					"params": {
						"dataKey": "The data key for which a bytes value is set.",
						"dataValue": "The value to set for the given data key."
					}
				},
				"OperatorAuthorizationChanged(address,address,uint256,bytes)": {
					"details": "Emitted when `tokenOwner` enables `operator` for `amount` tokens.",
					"params": {
						"amount": "The amount of tokens `operator` address has access to from `tokenOwner`",
						"operator": "The address authorized as an operator",
						"operatorNotificationData": "The data to notify the operator about via LSP1.",
						"tokenOwner": "The token owner"
					}
				},
				"OperatorRevoked(address,address,bool,bytes)": {
					"details": "Emitted when `tokenOwner` disables `operator` for `amount` tokens and set its {`authorizedAmountFor(...)`} to `0`.",
					"params": {
						"notified": "Bool indicating whether the operator has been notified or not",
						"operator": "The address revoked from operating",
						"operatorNotificationData": "The data to notify the operator about via LSP1.",
						"tokenOwner": "The token owner"
					}
				},
				"Transfer(address,address,address,uint256,bool,bytes)": {
					"details": "Emitted when the `from` transferred successfully `amount` of tokens to `to`.",
					"params": {
						"amount": "The amount of tokens transferred.",
						"data": "Any additional data included by the caller during the transfer, and sent in the LSP1 hooks to the `from` and `to` addresses.",
						"force": "if the transferred enforced the `to` recipient address to be a contract that implements the LSP1 standard or not.",
						"from": "The address which tokens were sent from (balance decreased by `-amount`).",
						"operator": "The address of the operator that executed the transfer.",
						"to": "The address that received the tokens (balance increased by `+amount`)."
					}
				}
			},
			"kind": "dev",
			"methods": {
				"authorizeOperator(address,uint256,bytes)": {
					"custom:danger": "To avoid front-running and Allowance Double-Spend Exploit when increasing or decreasing the authorized amount of an operator, it is advised to use the {increaseAllowance} and {decreaseAllowance} functions. For more information, see: https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/",
					"details": "Sets an `amount` of tokens that an `operator` has access from the caller's balance (allowance). See {authorizedAmountFor}. Notify the operator based on the LSP1-UniversalReceiver standard",
					"params": {
						"amount": "The allowance amount of tokens operator has access to.",
						"operator": "The address to authorize as an operator.",
						"operatorNotificationData": "The data to notify the operator about via LSP1."
					}
				},
				"authorizedAmountFor(address,address)": {
					"details": "Get the amount of tokens `operator` address has access to from `tokenOwner`. Operators can send and burn tokens on behalf of their owners.",
					"params": {
						"operator": "The operator's address to query the authorized amount for.",
						"tokenOwner": "The token owner that `operator` has allowance on."
					},
					"returns": {
						"_0": "The amount of tokens the `operator`'s address has access on the `tokenOwner`'s balance."
					}
				},
				"balanceOf(address)": {
					"details": "Get the number of tokens owned by `tokenOwner`. If the token is divisible (the {decimals} function returns `18`), the amount returned should be divided by 1e18 to get a better picture of the actual balance of the `tokenOwner`. _Example:_ ``` balanceOf(someAddress) -> 42_000_000_000_000_000_000 / 1e18 = 42 tokens ```",
					"params": {
						"tokenOwner": "The address of the token holder to query the balance for."
					},
					"returns": {
						"_0": "The amount of tokens owned by `tokenOwner`."
					}
				},
				"batchCalls(bytes[])": {
					"custom:info": "It's not possible to send value along the functions call due to the use of `delegatecall`.",
					"details": "Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.",
					"params": {
						"data": "An array of ABI encoded function calls to be called on the contract."
					},
					"returns": {
						"results": "An array of abi-encoded data returned by the functions executed."
					}
				},
				"decimals()": {
					"details": "Returns the number of decimals used to get its user representation. If the asset contract has been set to be non-divisible via the `isNonDivisible_` parameter in the `constructor`, the decimals returned will be `0`. Otherwise `18` is the common value.",
					"returns": {
						"_0": "the number of decimals. If `0` is returned, the asset is non-divisible."
					}
				},
				"decreaseAllowance(address,address,uint256,bytes)": {
					"details": "Atomically decreases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard",
					"params": {
						"operator": "The operator to decrease allowance for `msg.sender`",
						"subtractedAmount": "The amount to decrease by in the operator's allowance.",
						"tokenOwner": "The address of the token owner."
					}
				},
				"getData(bytes32)": {
					"details": "Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.",
					"params": {
						"dataKey": "The data key for which to retrieve the value."
					},
					"returns": {
						"dataValue": "The bytes value stored under the specified data key."
					}
				},
				"getDataBatch(bytes32[])": {
					"details": "Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.",
					"params": {
						"dataKeys": "The array of keys which values to retrieve"
					},
					"returns": {
						"dataValues": "The array of data stored at multiple keys"
					}
				},
				"getOperatorsOf(address)": {
					"details": "Returns all `operator` addresses that are allowed to transfer or burn on behalf of `tokenOwner`.",
					"params": {
						"tokenOwner": "The token owner to get the operators for."
					},
					"returns": {
						"_0": "An array of operators allowed to transfer or burn tokens on behalf of `tokenOwner`."
					}
				},
				"increaseAllowance(address,uint256,bytes)": {
					"details": "Atomically increases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for the double spending allowance problem. Notify the operator based on the LSP1-UniversalReceiver standard",
					"params": {
						"addedAmount": "The additional amount to add on top of the current operator's allowance",
						"operator": "The operator to increase the allowance for `msg.sender`"
					}
				},
				"mint(address,uint256,bool,bytes)": {
					"details": "Public {_mint} function only callable by the {owner}."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"revokeOperator(address,address,bool,bytes)": {
					"details": "Enables `tokenOwner` to remove `operator` for its tokens, disallowing it to send any amount of tokens on its behalf. This function also allows the `operator` to remove itself if it is the caller of this function",
					"params": {
						"notify": "Boolean indicating whether to notify the operator or not.",
						"operator": "The address to revoke as an operator.",
						"operatorNotificationData": "The data to notify the operator about via LSP1.",
						"tokenOwner": "The address of the token owner."
					}
				},
				"setData(bytes32,bytes)": {
					"custom:events": "{DataChanged} event.",
					"custom:requirements": "- SHOULD only be callable by the {owner}.",
					"custom:warning": "**Note for developers:** despite the fact that this function is set as `payable`, the function is not intended to receive value (= native tokens). **An additional check has been implemented to ensure that `msg.value` sent was equal to 0**. If you want to allow this function to receive value in your inheriting contract, this function can be overriden to remove this check.",
					"details": "Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.",
					"params": {
						"dataKey": "The data key for which to set a new value.",
						"dataValue": "The new bytes value to set."
					}
				},
				"setDataBatch(bytes32[],bytes[])": {
					"custom:events": "{DataChanged} event **for each data key/value pair set**.",
					"custom:requirements": "- SHOULD only be callable by the {owner} of the contract.",
					"custom:warning": "**Note for developers:** despite the fact that this function is set as `payable`, the function is not intended to receive value (= native tokens). **An additional check has been implemented to ensure that `msg.value` sent was equal to 0**. If you want to allow this function to receive value in your inheriting contract, this function can be overriden to remove this check.",
					"details": "Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.",
					"params": {
						"dataKeys": "An array of data keys to set bytes values for.",
						"dataValues": "An array of bytes values to set for each `dataKeys`."
					}
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"totalSupply()": {
					"details": "Returns the number of existing tokens that have been minted in this contract.",
					"returns": {
						"_0": "The number of existing tokens."
					}
				},
				"transfer(address,address,uint256,bool,bytes)": {
					"details": "Transfers an `amount` of tokens from the `from` address to the `to` address and notify both sender and recipients via the LSP1 {`universalReceiver(...)`} function. If the tokens are transferred by an operator on behalf of a token holder, the allowance for the operator will be decreased by `amount` once the token transfer has been completed (See {authorizedAmountFor}).",
					"params": {
						"amount": "The amount of tokens to transfer.",
						"data": "Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.",
						"force": "When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.",
						"from": "The sender address.",
						"to": "The recipient address."
					}
				},
				"transferBatch(address[],address[],uint256[],bool[],bytes[])": {
					"details": "Same as {`transfer(...)`} but transfer multiple tokens based on the arrays of `from`, `to`, `amount`.",
					"params": {
						"amount": "An array of amount of tokens to transfer for each `from -> to` transfer.",
						"data": "An array of additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.",
						"force": "For each transfer, when set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.",
						"from": "An array of sending addresses.",
						"to": "An array of receiving addresses."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"title": "Fish",
			"version": 1
		},
		"userdoc": {
			"errors": {
				"LSP7BatchCallFailed(uint256)": [
					{
						"notice": "Batch call failed."
					}
				],
				"LSP7TokenContractCannotHoldValue()": [
					{
						"notice": "LSP7 contract cannot receive native tokens."
					}
				]
			},
			"events": {
				"DataChanged(bytes32,bytes)": {
					"notice": "The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."
				}
			},
			"kind": "user",
			"methods": {
				"batchCalls(bytes[])": {
					"notice": "Executing the following batch of abi-encoded function calls on the contract: `data`."
				},
				"decreaseAllowance(address,address,uint256,bytes)": {
					"notice": "Decrease the allowance of `operator` by -`subtractedAmount`"
				},
				"getData(bytes32)": {
					"notice": "Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."
				},
				"getDataBatch(bytes32[])": {
					"notice": "Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."
				},
				"increaseAllowance(address,uint256,bytes)": {
					"notice": "Increase the allowance of `operator` by +`addedAmount`"
				},
				"setData(bytes32,bytes)": {
					"notice": "Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."
				},
				"setDataBatch(bytes32[],bytes[])": {
					"notice": "Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."
				}
			},
			"notice": "Aratta Labs token/ LSP7",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"lsp7-8samples/Aratta-LSP7.sol": "ARATTA"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@erc725/smart-contracts-v8/contracts/ERC725Y.sol": {
			"keccak256": "0x209d6b52eb0d5dcb8c180773dd67e507f603c98ede7e5a64457752159a52ad3d",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://dbfa427c80ba998d30c721fb41795502d19aa09acb8e1f59f6982d080f029692",
				"dweb:/ipfs/QmPQXeYEU7kaDtskZ1ha2umRuGSrFTfXfpyiGgBSQfwZBn"
			]
		},
		"@erc725/smart-contracts-v8/contracts/constants.sol": {
			"keccak256": "0x37da1619e580b6af6a68e91b4784f7945ee2344fad3a96b6dfb2592e35fedb60",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://fb9436bd587d7b38c532f317dbd4bc5f178b50906b1a5e29adf24908f27b2c47",
				"dweb:/ipfs/QmW2vTCNM7Mr4vW5t9yBK7Zmh1FtaVjPwdAbyFcPNBSZYL"
			]
		},
		"@erc725/smart-contracts-v8/contracts/errors.sol": {
			"keccak256": "0x198fece17fcfec61d40d3453ebbaa49760968ea8caa128dd5314a12b98ecec66",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://5e705131b03cf4167ff312e7ebaa679cf56c22b01de518dfa4d2163d7e1ddb8b",
				"dweb:/ipfs/QmbH8q7MgrR7fJm1QEmYoKcnZCxWwejt4Jum2DUYmLJAGA"
			]
		},
		"@erc725/smart-contracts-v8/contracts/interfaces/IERC725Y.sol": {
			"keccak256": "0x943d0f67d6455cfb1bed5d1fb77995df0b202ecdbb028fa0e85bc26bcd3219a5",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://c3b8b0daa2fed9c0513444120b87beec7c2b102eadbcbeccae73ece67819a658",
				"dweb:/ipfs/QmaSb9Xhma6UwhK1FosJtbP8EkBn8i9PTcLKg5FU1VAJSH"
			]
		},
		"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol": {
			"keccak256": "0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://59076395f660838919a2068cb7792c0fa70533642bbc5b4e3cc3cbb2c9ec7b50",
				"dweb:/ipfs/QmQqew3mDuyHCBdd4v1JiwRiKEbzk3LeHchzTHSdyhYg5b"
			]
		},
		"@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/presets/LSP7Mintable.sol": {
			"keccak256": "0x4d8239570e39ae1cd943c58359addac6dbfbc05ca8ff0727dbefb70652314fca",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://14b6e506fd2d0122b3445c826d48ae2bc0c6624b4b710e720732867bc6c62a57",
				"dweb:/ipfs/QmcLg9MSU1fkhJGiK1i6zYFGgbvspitGfT4Z2tB6JkQThW"
			]
		},
		"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol": {
			"keccak256": "0x5b8764a678dc9d6673eafa8ad0ee6053cdea30acb58015bdf9c93f9f1788b49b",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://0e26dcf5d66120b7a0895ddcaec92207e17c63344fca885d2b7e3fe953ec027c",
				"dweb:/ipfs/QmetAuz9etfz9BG9oPJCwMthnhfd8XvZYLBmMfrPNUm3qV"
			]
		},
		"@lukso/lsp1-contracts/contracts/LSP1Constants.sol": {
			"keccak256": "0x0f87fc38243fc70316e22814f5a79d9c0770a39f64077cbc6fb5fddfa1d4c23c",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://c7d83f054b71dfa5ca48a9a811e6a985ff6b38a9e5f4c220ea2ec3a322cce7cf",
				"dweb:/ipfs/QmaehpHpqc5dtRCm9BoU8vCY59AeEnmGvmmwPirVr47oGp"
			]
		},
		"@lukso/lsp1-contracts/contracts/LSP1Utils.sol": {
			"keccak256": "0xa81bf1910c3b56b43bf58d0be2105c434ed3b65cfb3674e282b5aba3fd35afb0",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://374e7bef39522d65cf8e45c365178eb54d159b9267d0c2a2b97dfea10e52d41f",
				"dweb:/ipfs/QmfVYVnVSTRVAAifFSyFk8icePgw3eeqpjAKWAwfHMu6vX"
			]
		},
		"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol": {
			"keccak256": "0x6d4bb208587872ad563fef31655c44f7de03baa5b4a513910c0003aea0c04036",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://880c3b21e2090a14e7bba94ac5c8d4633e8a81d93c6f619454167a01dcc866d8",
				"dweb:/ipfs/QmZp6YVM4Eor5XtuXXqGRaPAJ3u5KCmLwuNRAGf4JY7sK1"
			]
		},
		"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol": {
			"keccak256": "0x75a0159f76a3c5bf26b13aa404aca2f588ea41928eb1483683e29d2031fe5abf",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://f1b93e7eb5a88a2f42a9dfa061ca5e93e7650cd9114010faa18faf0a5508f579",
				"dweb:/ipfs/QmXmLhf1ejsF7G1FZnvpTBRS9oQ9ZTuqCBRT1im3vAuUYW"
			]
		},
		"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol": {
			"keccak256": "0x4536ed09238f33ca9d40ed2e7c6254aac84bf81010b3524711524ae7fd30227c",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://abaed57358cb811d3b368d52f66db3c1327b96c38301d6eccf2ffaa6d5fa5928",
				"dweb:/ipfs/QmS1FtQH4Gn6xYrHCTHWJwxgAURvGvvfypsuQ2rRhrkPgi"
			]
		},
		"@lukso/lsp2-contracts/contracts/LSP2Utils.sol": {
			"keccak256": "0x86ce8a85d12c79b76db5413b05b9bff16cd865b395efdc0e85b06b3b5e17219b",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://7ebb6d1152f88b459b9e8fc3ef6361a9fb9d03bfa994148e6b125a2ee4025487",
				"dweb:/ipfs/QmX18bCecAtrjqKTyCPqRrUuvVYSW1XZZJUgvjfYnqfmEH"
			]
		},
		"@lukso/lsp4-contracts/contracts/LSP4Constants.sol": {
			"keccak256": "0xdf9b7c688d39a92cb3238136a9f56554245d5ae9b6568dcd6164d0e15c6f56c7",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://bb36a427cdfa0f394d2d78014f85152ab383499fc3c3d6285d4b801c656e7c3f",
				"dweb:/ipfs/QmZJehfeWKfHLyZLufhs9u4ZyVztGCUNWXzFgfZSU837vU"
			]
		},
		"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol": {
			"keccak256": "0x6a718979925b05064c15e4de4b376dadec8d107d720aa762d22a06e44ed67fa4",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://3c82f6c8133c4d35d8cbbfc4da647204989acc5f38980be787263881e9f732f5",
				"dweb:/ipfs/QmdhHBnJvvo4Ax183HgHkL7w5A4w3ADXDQuewocnTVqsW6"
			]
		},
		"@lukso/lsp4-contracts/contracts/LSP4Errors.sol": {
			"keccak256": "0x3db7fd252ed02ce27686141125c3d65d3ff682a32601e1e8611becd9357a57b5",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://5aded62a160ed7f9860996004d1656e8592b3f97d478d8597f8ad6afbe4f34b7",
				"dweb:/ipfs/QmcnmLVt8cmz1iRNaX5c6iNYckRgUXGz8YkjHW9T1KNB5A"
			]
		},
		"@lukso/lsp7-contracts/contracts/ILSP7DigitalAsset.sol": {
			"keccak256": "0xed4d99a44fa7f33938b35e46c181bb6ed90b6f9dd659af93670a406ececa64da",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://6431975ac7b6951c1d6f9c27352b113074faf10319499d51bafc4f38d3cb31a7",
				"dweb:/ipfs/Qmd7MForQ2P1T3jZp4CbdCEPoPg7HfgwtkNAg34EahqWwn"
			]
		},
		"@lukso/lsp7-contracts/contracts/LSP7Constants.sol": {
			"keccak256": "0x449280dee4ad5f85da5d3eecc624c084cf6edaffb560c98b911dcd47169d846e",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://9bf9a6ab9124b365f1e2f2178f048587e75af27216ab638127f14b79c114ee79",
				"dweb:/ipfs/QmVUVkPstmvBvx1xchN2dvDqgg4L72KSmkbgHLmiHZvAEk"
			]
		},
		"@lukso/lsp7-contracts/contracts/LSP7DigitalAsset.sol": {
			"keccak256": "0xfbba5c0e4cfac4431f8e53996c0d3911d38129b57ca47e317c1cc1d97de4dfd0",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://1701aab7c67ad6bae9a0df8d72d2741a2280f626758fd4df2f14ceb5d25900b2",
				"dweb:/ipfs/QmSTBM3sXPkAGPohid4bg7YiLZAhiJFDw5HjukGvW6g7PR"
			]
		},
		"@lukso/lsp7-contracts/contracts/LSP7Errors.sol": {
			"keccak256": "0x5bd6d23f61d45a390041b788c5e341bd0e1972b4112c7700af1addcfa284e821",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://d41b3e6e9eaea0a53886d33536d0e83b8878f3b5fb17d7683592742f78a66938",
				"dweb:/ipfs/QmetTsJ7RWXF733TtHTyBLvjGJf7oLxzCSKYRpJnK61we7"
			]
		},
		"@lukso/lsp7-contracts/contracts/presets/ILSP7Mintable.sol": {
			"keccak256": "0x3165b2f938913fcaa7d5823961a560c99ba250cf83132617b0f5d60fef9ed410",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://632a8ff681029956e562f3a7c4624387e4975069a653cbe399f3bca5d1a17aaa",
				"dweb:/ipfs/QmT9ahMCBtZgMJLYJKuMTEfhYkhmbhPiZeSq6Y7gQsH3Td"
			]
		},
		"@lukso/lsp7-contracts/contracts/presets/LSP7Mintable.sol": {
			"keccak256": "0xe7e8166577e5c77512c5572f5edf397249093f43d36e7e6da8d0a68d1ef40e69",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://c153d6575ff6a66bbe185b2382407756c53de46791dc757cb929c0b4fd8f2619",
				"dweb:/ipfs/QmP4ym7LDmNwUsiZAbBRhWGYCiNbRrNc6jk8Pv3yx3dyEQ"
			]
		},
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218",
			"license": "MIT",
			"urls": [
				"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32",
				"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439",
			"license": "MIT",
			"urls": [
				"bzz-raw://a367861093b74443b137564d3f3c472f70bcf114739e62059c939f25e315706c",
				"dweb:/ipfs/Qmd7JMpcxD9RuQjK3uM3EzJUgSqdN8vzp8eytEiuwxQJ6h"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
				"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
			"keccak256": "0x5a08ad61f4e82b8a3323562661a86fb10b10190848073fdc13d4ac43710ffba5",
			"license": "MIT",
			"urls": [
				"bzz-raw://6f7bb74cf88fd88daa34e118bc6e363381d05044f34f391d39a10c0c9dac3ebd",
				"dweb:/ipfs/QmNbQ3v8v4zuDtg7VeLAbdhAm3tCzUodNoDZZ8ekmCHWZX"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
			"keccak256": "0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514",
			"license": "MIT",
			"urls": [
				"bzz-raw://20bf19b2b851f58a4c24543de80ae70b3e08621f9230eb335dc75e2d4f43f5df",
				"dweb:/ipfs/QmSYuH1AhvJkPK8hNvoPqtExBcgTB42pPRHgTHkS5c5zYW"
			]
		},
		"lsp7-8samples/Aratta-LSP7.sol": {
			"keccak256": "0x7e6ce610efdfb6cd1a0015121637c26c3e38bc1e4ddacf0b84907056fe21efc0",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://2bcb392967ad96cb8d13b3c4aab7baa8302774c9bc41b64e949c10669770c7e9",
				"dweb:/ipfs/QmWNRfQ1ERrze24eEhqPZuRksoT33o2uApkZHPtAi1PvZU"
			]
		},
		"lsp7-8samples/_error.sol": {
			"keccak256": "0x0ff53ad6097ff966df2873d1b48e094d5051b2e6c8a16bf081c42da0fe34b3e2",
			"license": "MIT",
			"urls": [
				"bzz-raw://c4b3853c82980c0dc7a62168025f7371a82ad29b69ee2fd877433310676b02cc",
				"dweb:/ipfs/QmQCdvE6kDokcBsykEt9JAy8wMvjmiPeaguBg6CskXf4PD"
			]
		}
	},
	"version": 1
}